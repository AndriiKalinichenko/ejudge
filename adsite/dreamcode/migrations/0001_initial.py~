# -*- coding: utf-8 -*-
<<<<<<< Updated upstream
# Generated by Django 1.9 on 2017-12-13 05:27
=======
# Generated by Django 1.9.4 on 2017-12-13 05:30
>>>>>>> Stashed changes
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import dreamcode.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
<<<<<<< Updated upstream
                ('start', models.DateTimeField(default=datetime.datetime(2017, 12, 13, 5, 27, 8, 964194, tzinfo=utc))),
                ('end', models.DateTimeField(default=datetime.datetime(2017, 12, 13, 5, 27, 8, 964240, tzinfo=utc))),
=======
                ('start', models.DateTimeField(default=datetime.datetime(2017, 12, 13, 5, 30, 36, 234622, tzinfo=utc))),
                ('end', models.DateTimeField(default=datetime.datetime(2017, 12, 13, 5, 30, 36, 234705, tzinfo=utc))),
>>>>>>> Stashed changes
                ('contestants', models.ManyToManyField(null=True, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('statement', models.TextField(default='')),
                ('max_score', models.IntegerField(default=500)),
                ('submission_template', models.TextField(default='')),
                ('contest', models.ForeignKey(default=dreamcode.models.get_or_create_default_contest, on_delete=django.db.models.deletion.CASCADE, to='dreamcode.Contest')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField(blank=True, default='')),
                ('status', models.CharField(choices=[('NT', 'Not Tested'), ('CE', 'Compile Error'), ('PD', 'Pending'), ('TS', 'Tested')], default='NT', max_length=2)),
                ('score_percent', models.IntegerField(default=-1)),
                ('result', models.CharField(choices=[('NT', 'Not Tested'), ('CE', 'Compile Error'), ('PD', 'Pending'), ('TS', 'Tested'), ('OK', 'Accepted'), ('FA', 'Failed')], default='NT', max_length=2)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('is_public', models.BooleanField(default=False)),
                ('language', models.CharField(choices=[('python', 'python')], default='python', max_length=20)),
                ('submission_template', models.TextField(default='')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dreamcode.Problem')),
            ],
            options={
                'permissions': (('can_test_submission', 'Can test submission'),),
            },
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input', models.FileField(upload_to=dreamcode.models.test_case_input_path)),
                ('output', models.FileField(upload_to=dreamcode.models.test_case_output_path)),
                ('cpu_time_limit', models.IntegerField(default=2000)),
                ('wallclock_time_limit', models.IntegerField(default=6000)),
                ('memory_limit', models.IntegerField(default=8388608)),
                ('is_public', models.BooleanField(default=False)),
                ('hint', models.TextField(blank=True, default='')),
                ('type', models.CharField(choices=[('IO', 'Input - Output'), ('MD', 'Mandatory - Denied')], default='IO', max_length=2)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dreamcode.Problem')),
            ],
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(default='', max_length=255)),
                ('status', models.CharField(choices=[('PD', 'Pending'), ('OK', 'Okay'), ('RF', 'Restricted Function'), ('ML', 'Memory Limit Exceed'), ('OL', 'Output Limit Exceed'), ('TL', 'Time Limit Exceed'), ('RT', 'Run Time Error (SIGSEGV, SIGFPE, ...)'), ('AT', 'Abnormal Termination'), ('IE', 'Internal Error (of sandbox executor)'), ('BP', 'Bad Policy'), ('R0', 'Reserved result type 0'), ('R1', 'Reserved result type 1'), ('R2', 'Reserved result type 2'), ('R3', 'Reserved result type 3'), ('R4', 'Reserved result type 4'), ('R5', 'Reserved result type 5'), ('EX', 'Exception'), ('FA', 'Failed')], default='PD', max_length=2)),
                ('memory', models.IntegerField(default=0)),
                ('cpu_time', models.IntegerField(default=0)),
                ('result', models.CharField(choices=[('PD', 'Pending'), ('OK', 'Accepted'), ('FA', 'FAILED')], default='PD', max_length=2)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_results', to='dreamcode.Submission')),
                ('test_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_results', to='dreamcode.TestCase')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='testresult',
            unique_together=set([('submission', 'test_case')]),
        ),
        migrations.AlterUniqueTogether(
            name='submission',
            unique_together=set([('author', 'problem')]),
        ),
    ]
